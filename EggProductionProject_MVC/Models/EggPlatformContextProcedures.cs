// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using EggProductionProject_MVC.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace EggProductionProject_MVC.Models
{
    public partial class EggPlatformContext
    {
        private IEggPlatformContextProcedures _procedures;

        public virtual IEggPlatformContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new EggPlatformContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IEggPlatformContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class EggPlatformContextProcedures : IEggPlatformContextProcedures
    {
        private readonly EggPlatformContext _context;

        public EggPlatformContextProcedures(EggPlatformContext context)
        {
            _context = context;
        }

        public virtual async Task<List<GetDailyDataResult>> GetDailyDataAsync(int? MemberSid, int? HouseSid, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MemberSid",
                    Value = MemberSid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "HouseSid",
                    Value = HouseSid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetDailyDataResult>("EXEC @returnValue = [dbo].[GetDailyData] @MemberSid = @MemberSid, @HouseSid = @HouseSid", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEventsForMemberResult>> GetEventsForMemberAsync(int? MemberSid, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MemberSid",
                    Value = MemberSid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEventsForMemberResult>("EXEC @returnValue = [dbo].[GetEventsForMember] @MemberSid = @MemberSid", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> InsertCalendarAsync(int? MemberSid, string Title, string TodoList, DateOnly? StartDate, DateOnly? InsertDate, int? Finished, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MemberSid",
                    Value = MemberSid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Title",
                    Size = 510,
                    Value = Title ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TodoList",
                    Value = TodoList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "InsertDate",
                    Value = InsertDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "Finished",
                    Value = Finished ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[InsertCalendar] @MemberSid = @MemberSid, @Title = @Title, @TodoList = @TodoList, @StartDate = @StartDate, @InsertDate = @InsertDate, @Finished = @Finished", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
