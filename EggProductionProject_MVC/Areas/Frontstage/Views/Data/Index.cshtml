@model EggProductionProject_MVC.Models.Member
@{
    Layout = "_FrontLayout_light";
}

@section Styles{
    <link href="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css" rel="stylesheet">
    
    <style>
        .custom-tab {
            color: #d4af37; /* 標籤的文字顏色 */
            background-color: #f9f9f9; /* 標籤的背景色 */
            border: 1px solid #d4af37; /* 邊框顏色 */
            border-radius: 0; /* 移除邊框圓角 */
            padding: 10px 20px; /* 調整內邊距 */
            margin-right: 5px; /* 調整標籤之間的間距 */
        }

        .custom-tab.active {
            background-color: #d4af37; /* 活躍標籤的背景色 */
            color: #ffffff; /* 活躍標籤的文字顏色 */
        }

        .custom-nav-border {
            border: 2px solid #d4af37; /* 邊框顏色 */
            border-radius: 50px; /* 創建橢圓形邊框 */
            padding: 1px; /* 邊框內間距 */
            display: inline-block;
        }

        .nav-pills {
            justify-content: center; /* 確保標籤置中 */
        }

        /* 更改所有事件的文字顏色 */
        .fc .fc-event {
            color: #ffffff; /* 白色文字 */
            background-color: #d4af37; /* 按鈕背景顏色 */
            border: none; /* 去除邊框 */
        }

        /* 改變特定日期的文字顏色 */
        .fc .fc-daygrid-day-number {
            color: #333; /* 更改日期數字的顏色 */
        }

        /* 更改今天的背景色和文字顏色 */
        .fc .fc-day-today {
            background-color: #d4af37; 
            color: #000; /* 黑色文字 */
        }

        .custom-day-hover:hover {
            background-color: #f0f8ff !important; /* 修改為你想要的顏色 */
            cursor: pointer; /* 改變鼠標樣式 */
        }

        /* 自定義 Modal 樣式 */
        .confirm-modal .modal-content {
            background-color: #fff; /* 背景顏色 */
            border-radius: 10px; /* 圓角 */
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* 增加陰影效果 */
        }

        .confirm-modal .modal-header {
            border-bottom: none; /* 去掉邊框 */
            padding-bottom: 10px; /* 調整內邊距 */
        }

        .confirm-modal .modal-footer {
            border-top: none; /* 去掉邊框 */
            padding-top: 10px; /* 調整內邊距 */
        }

        .confirm-modal .modal-dialog {
            max-width: 400px; /* 調整寬度 */
        }

        /* 自定義按鈕樣式 */
        .custom-btn-secondary, .custom-btn-primary, .custom-btn-danger, .custom-btn-warning {
            border: none;
            padding: 8px 16px; /* 調整內距 */
            border-radius: 5px; /* 邊框圓角 */
            cursor: pointer;
            transition: background-color 0.3s, box-shadow 0.3s; /* 增加過渡效果 */
            font-size: 14px; /* 調整字體大小 */
            margin: 2px; /* 增加按鈕之間的間距 */
        }

        /* 調整各按鈕的顏色及其懸停效果 */
        .custom-btn-secondary {
            background-color: #aebcc9;
            color: #fff;
        }

            .custom-btn-secondary:hover {
                background-color: #6c757d;
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2); /* 懸停時增加陰影效果 */
            }

        .custom-btn-primary {
            background-color: #cb9205;
            color: #fff;
        }

            .custom-btn-primary:hover {
                background-color: #e0a800;
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2); /* 懸停時增加陰影效果 */
            }

        .custom-btn-danger {
            background-color: #dc3545;
            color: #fff;
        }

            .custom-btn-danger:hover {
                background-color: #c82333;
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2); /* 懸停時增加陰影效果 */
            }

        .custom-btn-warning {
            background-color: #ffc107;
            color: #212529;
        }

            .custom-btn-warning:hover {
                background-color: #e0a800;
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2); /* 懸停時增加陰影效果 */
            }

        /* 自定義 Modal 文字和表單樣式 */
        .modal-body {
            max-height: 70vh; /* 設定最大高度為視窗高度的70% */
            overflow-y: auto; /* 超出時自動顯示滾動條 */
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; /* 設定字體 */
            color: #333; /* 設定文字顏色 */
            line-height: 1.6; /* 設定行距 */
            font-size: 15px; /* 設定字體大小 */
        }

            /* 表單標籤樣式 */
            .modal-body label {
                font-weight: bold; /* 粗體字 */
                color: #555; /* 標籤文字顏色 */
                margin-bottom: 5px; /* 底部外距 */
                display: block; /* 顯示為塊狀 */
            }

            /* 輸入框和文本區域樣式 */
            .modal-body .form-control {
                border: 1px solid #cb9205; /* 邊框顏色 */
                border-radius: 5px; /* 邊框圓角 */
                padding: 10px; /* 內距 */
                box-shadow: none; /* 移除內建的陰影 */
                transition: border-color 0.3s, box-shadow 0.3s; /* 增加過渡效果 */
            }

                .modal-body .form-control:focus {
                    border-color: #e0a800; /* 聚焦時的邊框顏色 */
                    box-shadow: 0 0 5px rgba(224, 168, 0, 0.5); /* 聚焦時的陰影 */
                }

            /* 文字區域樣式 */
            .modal-body textarea {
                resize: none; /* 禁止調整大小 */
                height: 100px; /* 設定高度 */
            }
    </style>
}

<body>
    <main>
        <div class="title-bg mb-3">
            <img class="w-100" src="~/frontstagetemplate/assets/brand/layout/banners/banner_18.png" />
        </div>

        @if (Model == null)
        {
            <script>
                // 使用 JavaScript 跳轉到登入頁面
                window.location.href = 'https://localhost:7080/Identity/Account/Login';
            </script>
        }
        else if (Model?.Chickcode == null)
        {
            <div class="d-flex justify-content-center">
                <img src="~/memberimg/chickopenfirst.jpg" />
            </div>
        }
        else
        {
            <div class="w-100 mt-3 mt-md-5">
                <div class="d-flex justify-content-center">
                    <div class="custom-nav-border">
                        <ul class="nav nav-pills mb-1 tab-controll-n justify-content-center"
                            id="pills-tab"
                            role="tablist">
                            <li class="nav-item" role="presentation">
                                <button class="nav-link active custom-tab"
                                        id="pills-one-tab"
                                        data-bs-toggle="pill"
                                        data-bs-target="#pills-one"
                                        type="button"
                                        role="tab"
                                        aria-controls="pills-one"
                                        aria-selected="true">
                                    蛋雞分析
                                </button>
                            </li>
                            <li class="nav-item" role="presentation">
                                <button class="nav-link custom-tab"
                                        id="pills-two-tab"
                                        data-bs-toggle="pill"
                                        data-bs-target="#pills-two"
                                        type="button"
                                        role="tab"
                                        aria-controls="pills-two"
                                        aria-selected="false">
                                    行事曆
                                </button>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>

            <div class="tab-content" id="pills-tabContent">
                <!-- 折線圖的內容 -->
                <div class="tab-pane fade show active"
                     id="pills-one"
                     role="tabpanel"
                     aria-labelledby="pills-one-tab">
                    <div class="container mt-5">
                        <div class="row">
                            <div class="col-md-9">
                            <h3>蛋雞紀錄分析</h3>
                                <canvas id="myChart" style="height: 500px; margin-bottom: 80px"></canvas>
                            </div>
                            <div class="col-md-3">
                                <h4>篩選條件</h4>
                                <div class="card">
                                    <div class="card-body">
                                        <div class="mb-3">
                                            <label for="ChickHouse_Selected" class="form-label">雞舍</label>
                                            <select class="form-select" id="ChickHouse_Selected"></select>
                                        </div>
                                        <div class="mb-3">
                                            <label for="Rate_Selected" class="form-label">資料型態</label>
                                            <select class="form-select" id="Rate_Selected">
                                                <option value=1>產蛋率</option>
                                                <option value=2>蛋不合格率</option>
                                                <option value=3>雞隻死亡率</option>
                                            </select>
                                        </div>
                                        <div class="mb-3">
                                            <label for="dateRange" class="form-label">時間</label>
                                            <input type="text"
                                                   class="form-control"
                                                   id="dateRange"
                                                   placeholder="選擇日期範圍" />
                                        </div>
                                        <br />
                                        <button type="button" class="btn btn-primary w-50" id="filter">篩選</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- 行事曆的內容 -->
                <div class="tab-pane fade"
                     id="pills-two"
                     role="tabpanel"
                     aria-labelledby="pills-two-tab">
                    <div class="container mt-5">
                        <div class="row">
                            <div class="col-md-12">
                                <h3>行事曆</h3>
                                <div id="calendar" class="border p-3 rounded shadow-sm"></div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Modal 事件新增彈出視窗 -->
                <div class="modal fade confirm-modal" id="addEventModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                    <div class="modal-dialog" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="exampleModalLabel">新增事件</h5>
                                <button type="button" class="close" aria-label="Close" onclick="closeAddModal()">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>
                            <div class="modal-body">
                                <form id="addEventForm">
                                    <div class="form-group">
                                        <label for="addEventTitle">標題</label>
                                        <input type="text" class="form-control" id="addEventTitle" value="打掃雞舍" required>
                                    </div>
                                    <div class="form-group">
                                        <label for="addEventTodoList">敘述</label>
                                        <textarea class="form-control" id="addEventTodoList" required>今天需要清理雞舍</textarea>
                                    </div>
                                    <input type="hidden" id="addEventDate">
                                </form>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="custom-btn-secondary" onclick="closeAddModal()">取消</button>
                                <button type="button" class="custom-btn-primary" onclick="submitEvent()">保存</button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Modal 事件修改彈出視窗 -->
                <div class="modal fade confirm-modal" id="editEventModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                    <div class="modal-dialog" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="exampleModalLabel">事件詳細</h5>
                                <button type="button" class="close" aria-label="Close" onclick="closeEditModal()">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>
                            <div class="modal-body">
                                <form id="editEventForm">
                                    <div class="form-group">
                                        <label for="editEventTitle">標題</label>
                                        <input type="text" class="form-control" id="editEventTitle" readonly>
                                    </div>
                                    <div class="form-group">
                                        <label for="editEventTodoList">敘述</label>
                                        <textarea class="form-control" id="editEventTodoList" readonly></textarea>
                                    </div>
                                    <div class="form-group">
                                        <label for="editEventFinished">是否完成</label>
                                        <select class="form-control" id="editEventFinished" disabled>
                                            <option value="0">未完成</option>
                                            <option value="1">已完成</option>
                                        </select>
                                    </div>
                                    <input type="hidden" id="editEventId">
                                    <input type="hidden" id="editEventDate">
                                </form>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="custom-btn-secondary" onclick="closeEditModal()">取消</button>
                                <button type="button" class="custom-btn-danger" id="confirmDeleteBtn" onclick="confirmDeleteEvent()">刪除</button>
                                <button type="button" class="custom-btn-warning" id="editEventBtn" onclick="enableEdit()">修改</button>
                                <button type="button" class="custom-btn-primary" id="saveEventBtn" onclick="updateEvent()" style="display: none;">保存</button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="toast-container position-fixed bottom-0 end-0 p-3">
                    <div id="dynamicToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
                        <div class="toast-header">
                            <strong class="me-auto" id="toastTitle">通知</strong>
                            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                        </div>
                        <div class="toast-body" id="toastMessage">
                            <!-- 訊息將由 JavaScript 動態設置 -->
                        </div>
                    </div>
                </div>
            </div>
        }
    </main>
</body>

@section Scripts{
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.js"></script>
    <script src="~/js/Data/Data.js"></script>
    @if (Model?.Chickcode != null)
    {
        <script>
            let calendar; // 定義行事曆變數
            let myChart;
            document.addEventListener('DOMContentLoaded', async function () {
                // 監聽標籤頁切換事件 初始化行事曆
                const tabElement = document.querySelector('button[data-bs-toggle="pill"][id="pills-two-tab"]'); // 使用更具體的選取器
                if (tabElement) {
                    tabElement.addEventListener('shown.bs.tab', function (e) {
                        if (!calendar) { // 如果行事曆尚未初始化
                            const calendarEl = document.getElementById('calendar');
                            if (calendarEl) {
                                calendar = new FullCalendar.Calendar(calendarEl, {
                                    initialView: 'dayGridMonth',
                                    locale: 'zh-tw',
                                    dateClick: function (info) {
                                        // 顯示新增事件的彈出視窗
                                        new bootstrap.Modal(document.getElementById('addEventModal')).show();

                                        // 填充日期訊息
                                        document.getElementById('addEventDate').value = info.dateStr;
                                    },
                                    events: '/Frontstage/DataApi/GetCalendarEvents',
                                    eventContent: function (arg) {
                                        // 創建一個新的 span 元素來表示事件的完成狀態
                                        var completedEl = document.createElement('span');
                                        completedEl.id = `completed-${arg.event.id}`; // 動態 ID，基於事件 ID
                                        completedEl.innerHTML = (arg.event.extendedProps.finished === 1 ? '✅' : '❌'); // 標示已完成或未完成

                                        // 創建一個新的 span 元素來顯示事件的標題
                                        var titleEl = document.createElement('span');
                                        titleEl.id = `title-${arg.event.id}`; // 動態 ID，基於事件 ID
                                        titleEl.innerHTML = '標題: ' + arg.event.title;

                                        // 將事件的標題和完成狀態組合為一個陣列
                                        var arrayOfDomNodes = [titleEl, completedEl];

                                        // 返回要顯示的 DOM 節點
                                        return { domNodes: arrayOfDomNodes };
                                    },
                                    eventDidMount: function (info) {
                                        if (info.event.extendedProps.finished === 1) {
                                            info.el.style.backgroundColor = 'lightgreen';
                                        } else {
                                            info.el.style.backgroundColor = 'lightcoral';
                                        }

                                        // 添加點擊事件來顯示事件詳細信息
                                        info.el.addEventListener('click', function () {
                                            showEventDetails(info.event);
                                        });
                                    },
                                    headerToolbar: {
                                        right: 'prev,next today',
                                        left: 'title',
                                    },
                                    dayCellClassNames: function (dateInfo) {
                                        return ['custom-day-hover'];
                                    },
                                    themeSystem: 'bootstrap',
                                    dayMaxEvents: true,
                                    editable: true,
                                    selectable: true,
                                });
                                calendar.render(); // 初始化並渲染行事曆
                            }
                        }
                    });
                }
    //-------------------------初始化折線圖------------------------------------------------------------

                //1.load雞舍
                await loadHouse();
                //2.初始化日期選擇器
                let isDateSet = false; // 用來追蹤日期是否已設置

                flatpickr('#dateRange', {
                    mode: 'range',
                    dateFormat: 'Y-m-d',
                    onOpen: function (selectedDates, dateStr, instance) {
                        instance.clear();
                        if (!isDateSet) {
                            const today = new Date();
                            const defaultStartDate = new Date();
                            defaultStartDate.setHours(0, 0, 0, 0); // 當天的開始時間
                            isDateSet = true; // 標記日期已設置
                        }
                    }
                });

                const ctx = document.getElementById('myChart').getContext('2d');
                myChart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: [],
                        datasets: [
                            {
                                label: '', // 實際數據集的標籤
                                data: [],
                                fill: false,
                                borderColor: 'rgb(203, 146, 5)', // 澄黃色
                                borderWidth: 3, // 增加線條寬度
                                pointBackgroundColor: 'rgb(203, 146, 5)', // 點的顏色
                                pointRadius: 4, // 增加點的大小
                                tension: 0.1
                            },
                            {
                                label: '', // 標準化數據集的標籤
                                data: [],
                                fill: false,
                                borderColor: 'rgb(255, 99, 132)', // 紅色
                                borderDash: [5, 5], // 使用虛線
                                borderWidth: 2, // 保持標準寬度
                                pointBackgroundColor: 'rgb(255, 99, 132)', // 點的顏色
                                pointRadius: 4, // 增加點的大小
                                tension: 0.1
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        plugins: { legend: { display: true, position: 'top' } },
                        scales: {
                            x: { display: true, title: { display: true, text: '日期' } },
                            y: { display: true, title: { display: true, text: '值' } }
                        }
                    }
                });

                const defaultJudge = 1; // 設置預設的 Judge 值
                const defaultHouseSid = document.getElementById('ChickHouse_Selected').value; // 設置 HouseSid 為加載後的第一個選項
                const defaultStartDate = null; // 初始無開始日期
                const defaultEndDate = null; // 初始無結束日期

                // 調用 updateChart 來設置初始數據
                updateChart(defaultJudge, defaultHouseSid, defaultStartDate, defaultEndDate);

            });
    //------------------------------------------行事曆code----------------------------------------------------------

            // 當點擊日曆中的事件時顯示詳細的彈出視窗
            function showEventDetails(event) {
                document.getElementById('editEventTitle').value = event.title;
                document.getElementById('editEventTodoList').value = event.extendedProps.description;
                document.getElementById('editEventFinished').value = event.extendedProps.finished;
                document.getElementById('editEventId').value = event.id;

                // 禁用編輯狀態
                document.getElementById('editEventTitle').readOnly = true;
                document.getElementById('editEventTodoList').readOnly = true;
                document.getElementById('editEventFinished').disabled = true;

                // 根據事件的完成狀態顯示或隱藏按鈕
                if (event.extendedProps.finished === 1) {
                    document.getElementById('editEventBtn').style.display = 'none';
                    document.getElementById('saveEventBtn').style.display = 'none';
                    document.getElementById('confirmDeleteBtn').style.display = 'none'; // 假設刪除按鈕 ID 為 confirmDeleteBtn
                } else {
                    document.getElementById('editEventBtn').style.display = 'inline-block';
                    document.getElementById('confirmDeleteBtn').style.display = 'inline-block';
                }

                new bootstrap.Modal(document.getElementById('editEventModal')).show();
            }

            // 關閉事件新增的彈出視窗
            function closeAddModal() {
                bootstrap.Modal.getInstance(document.getElementById('addEventModal')).hide();
            }

            // 關閉事件修改的彈出視窗
            function closeEditModal() {
                bootstrap.Modal.getInstance(document.getElementById('editEventModal')).hide();
            }

            // 啟用編輯模式
            function enableEdit() {
                document.getElementById('editEventTodoList').readOnly = false;
                document.getElementById('editEventFinished').disabled = false;
                document.getElementById('confirmDeleteBtn').style.display = 'none';
                document.getElementById('editEventBtn').style.display = 'none';
                document.getElementById('saveEventBtn').style.display = 'inline-block';
            }

            // 保存新事件
            async function submitEvent() {
                var eventTitle = document.getElementById('addEventTitle').value;
                var eventTodoList = document.getElementById('addEventTodoList').value;
                var eventDate = document.getElementById('addEventDate').value;

                var eventData = {
                    Title: eventTitle,
                    TodoList: eventTodoList,
                    StartDate: eventDate
                };

                try {
                    const response = await fetch('/Frontstage/DataApi/InsertCalendar', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(eventData)
                    });

                    const data = await response.json();

                    if (!response.ok) {
                        showToast('Error: ' + (data.message || '無法儲存事件'),'error');
                        return;
                    }

                    closeAddModal();
                    reloadCalendarEvents()
                } catch (e) {
                    showToast('Error:' + e.message,'error');
                }
            }

            // 更新現有事件
            async function updateEvent() {
                var eventId = document.getElementById('editEventId').value;
                var eventTitle = document.getElementById('editEventTitle').value;
                var eventTodoList = document.getElementById('editEventTodoList').value;
                var eventFinished = document.getElementById('editEventFinished').value;

                var eventData = {
                    Id: eventId,
                    Title: eventTitle,
                    TodoList: eventTodoList,
                    Finished: eventFinished
                };

                try {
                    const response = await fetch(`/Frontstage/DataApi/UpdateCalendar/${eventId}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(eventData)
                    });

                    const data = await response.json();

                    if (!response.ok) {
                        showToast('Error: ' + (data.message || '無法更新事件'),'error');
                        return;
                    }

                    closeEditModal();
                    reloadCalendarEvents()
                } catch (e) {
                    showToast('Error:' + e.message,'error');
                }
            }

            // 確認刪除事件
            function confirmDeleteEvent() {
                if (confirm('確定要刪除這個事件嗎？')) {
                    deleteEvent();
                }
            }

            // 刪除事件
            async function deleteEvent() {
                var eventId = document.getElementById('editEventId').value;

                try {
                    const response = await fetch(`/Frontstage/DataApi/DeleteCalendar/${eventId}`, {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });

                    const data = await response.json();

                    if (!response.ok) {
                        showToast('Error: ' + (data.message || '無法刪除事件'),'error');
                        return;
                    }

                    closeEditModal();
                    reloadCalendarEvents()
                } catch (e) {
                    showToast('Error:' + e.message,'error');
                }
            }

            function reloadCalendarEvents() {
                if (calendar) {
                    calendar.refetchEvents(); // 重新得到事件
                }
            }

    //------------------------------------------折線圖code----------------------------------------------------------

            document.getElementById('filter').addEventListener('click', function () {
                // 獲取輸入框的值
                const dateRangeInput = document.getElementById('dateRange').value;
                const Rate_Selected = document.getElementById('Rate_Selected');
                const ChickHouseSelected = document.getElementById('ChickHouse_Selected');

                const houseSid = ChickHouseSelected.value; // 從下拉選單獲取選定的 HouseSid
                const Judge = Number(Rate_Selected.value); // 從下拉選單獲取選定的 Judge

                if (!dateRangeInput) {
                    // 如果是空值，執行相應操作（例如使用默認篩選條件或顯示所有資料）
                    updateChart(Judge, houseSid, null, null); // 用 null 表示沒有選擇的日期範圍
                } else {
                    // 如果有日期範圍值，繼續處理
                    const [startDate, endDate] = dateRangeInput.split(' to ');
                    updateChart( Judge, houseSid, startDate, endDate);
                }
            });

            async function updateChart(Judge, houseSid, startDate, endDate) {
                try {
                    const response = await fetch(`/Frontstage/DataApi/Update_Chart?houseSid=${houseSid}&Judge=${Judge}&startDate=${encodeURIComponent(startDate)}&endDate=${encodeURIComponent(endDate)}`, {
                        method: 'GET',
                    });

                    if (!response.ok) {
                        showToast(`HTTP error! status: ${response.status}`,'error');
                        return;
                    }

                    const data = await response.json();

                    // 動態設置圖表數據
                    const labels = data.rate.map(item => item.date); // 提取日期
                    myChart.data.labels = labels;

                    if (Judge === 1) {
                        // 當 Judge 為 1 時，設置蛋率的數據
                        const actualValues = data.rate.map(item => item.actualValue); // 實際蛋率
                        const normalizedValues = data.rate.map(item => item.normalizedValue); // 標準化蛋率

                        myChart.data.datasets[0].data = actualValues; // 設置實際蛋率
                        myChart.data.datasets[1].data = normalizedValues; // 設置標準化蛋率
                        myChart.data.datasets[0].label = '實際蛋率';
                        myChart.data.datasets[1].label = '標準化蛋率';
                    } else if (Judge === 2) {
                        // 當 Judge 為 2 時，設置不合格率的數據
                        const values = data.rate.map(item => item.value); // 不合格率

                        myChart.data.datasets[0].data = values; // 設置不合格率
                        myChart.data.datasets[0].label = '不合格率';
                        myChart.data.datasets[1].data = []; // 清空另一條數據
                        myChart.data.datasets[1].label = '';
                    } else if (Judge===3){
                        // 當 Judge 為其他值時，設置死亡率的數據
                        const actualValues = data.rate.map(item => item.actualValue); // 實際死亡率
                        const normalizedValues = data.rate.map(item => item.normalizedValue); // 標準化死亡率

                        myChart.data.datasets[0].data = actualValues; // 設置實際死亡率
                        myChart.data.datasets[1].data = normalizedValues; // 設置標準化死亡率
                        myChart.data.datasets[0].label = '實際死亡率';
                        myChart.data.datasets[1].label = '標準化死亡率';
                    }

                    myChart.update(); // 更新圖表
                } catch (error) {
                    showToast('更新圖表時發生錯誤:'+error.message, error);
                }
            }


        </script>
   }
}